#!/usr/local/bin/ruby
$VERBOSE = true

def there_can_be_only_one_pid(name)
  pidfile = "/tmp/#{name}.pid"
  if File.exists?(pidfile)
    oldpid = File.read(pidfile).to_i
    # does that process exist?
    exists = true
    begin
      Process.kill(0, oldpid)
    rescue Errno::ESRCH
      File.delete(pidfile)
      exists = false
    rescue ::Exception   # for example on EPERM (process exists but does not belong to us)
      exists = true
    end
    raise "#{pidfile} => #{oldpid} is running" if exists
  end
  File.open(pidfile, "w") { |f| f.puts $$ }
  at_exit { File.unlink(pidfile) }
end

there_can_be_only_one_pid("sync_dash")

DIR = '/mnt/backups/'

servers = [29,30,31,32,33,34].map {|i| "dash#{i}" }
servers.each do |m|
  `rsync -avz -e "ssh -i /home/ubuntu/.ssh/production-code-org.pem" #{m}.code.org:/home/ubuntu/apps/dashboard/shared/log/*.gz #{DIR}#{m}/log`

  append = (File.mtime(Dir.glob("#{DIR}/#{m}/log/milestone*.gz").sort.last) < File.mtime("#{DIR}/#{m}/log/milestone.log")) ? '--append' : ''
  `rsync -avz #{append} -e "ssh -i /home/ubuntu/.ssh/production-code-org.pem" #{m}.code.org:/home/ubuntu/apps/dashboard/shared/log/*.log #{DIR}#{m}/log`
  puts "#{m}.code.org #{append}"
end

`/etc/cdo/count_lines > /tmp/line_data.json`
`cp /tmp/line_data.json #{DIR}`
